#!/usr/bin/env python3

import argparse
import subprocess
import re
import shutil
import numpy as np
import numpy.linalg as la

# Parameters
factor = 1.3
tol = 1e-6

def read_options():

    parser = argparse.ArgumentParser()
    parser.add_argument("-n","--ncores",dest="ncores",type=int, default=1, help="Number of cores for vasp run")
    parser.add_argument("-c","--mpi-command",dest="command",type=str, default="srun", help="Mpi execution command e.g. mpirun, mpiexec, srun")
    parser.add_argument("-v","--vasp",dest="vasp",type=str, default="vasp_std", help="Which vasp executable to run")
    parser.add_argument("-t","--top",dest="top",type=int, default=0, help="Number of atoms to be considered from the top of the c axis for vibrationals modes")
    parser.add_argument("-o","--only",dest="list_atoms",type=str, nargs='+', default=[], help="Specific atoms to consider fro vibrational modes")
    parser.add_argument("-b","--ibrion",dest="ibrion",type=int, default=5, help="IBRION value", choices=[5, 6])

    args = parser.parse_args()

    return args

def prepare_incar(ibrion):

    shutil.copyfile("INCAR", "INCAR.save")

    # Read Vasp input files
    with open("INCAR", "r") as f:
        old_incar = f.read()

    if re.search("IBRION\s*=\s*[\-0-9]+", old_incar):
        new_incar =  re.sub("(IBRION\s*=\s*)[\-0-9]+", "\g<1>%d"%ibrion, old_incar)
    else:
        new_incar = old_incar + ("\n" if old_incar[-1] != "\n" else "\n") + "IBRION = %d\n"%ibrion

    new_incar =  re.sub("NSW\s*=\s*[\-0-9]+", "", new_incar)

    new_incar =  re.sub("(ISTART\s*=\s*)[\-0-9]+", "\g<1>1", new_incar)

    new_incar =  re.sub("(ICHARG\s*=\s*)[\-0-9]+", "\g<1>0", new_incar)

    with open("INCAR", "w") as f:
        f.write(new_incar)
    
def read_poscar():
    with open("POSCAR", "r") as f:
        old_poscar = f.readlines()

    scale = float(old_poscar[1].strip())

    cell = np.empty((3,3))
    for i in range(3):
        cell[:,i] = [float(a) for a in old_poscar[i+2].split()]

    cell = cell*scale

    if re.search("^\s*(?:[0-9]+\s*)+$", old_poscar[5]):
        # Use potcar atoms
        with open("POTCAR", "r") as f:
            potcar = f.read()
        elements = np.array(re.findall("TITEL\s*=\s*\w+\s*(\w+)", potcar))
        nelem = np.cumsum([int(a) for a in old_poscar[5].split()])
        last = 5
    else:
        elements = np.array(old_poscar[5].split())
        nelem = np.cumsum([int(a) for a in old_poscar[6].split()])
        last = 6

    selective = old_poscar[last+1].strip()[0].lower()=="s"

    last += (1 if selective else 0)

    cartesian = old_poscar[last + 1].strip()[0].lower() in ["c","k"]

    atoms = []
    for i, line in enumerate(old_poscar[last+2:]):
        if re.search("^\s*(?:[\-0-9\.]+\s+){3}", line):
            content = line.split()
        pos = np.array([float(a) for a in content[:3]])
        
        if cartesian:
            pos = la.inv(cell).dot(pos*scale)

        elem = elements[i<=nelem-1][0]
        
        if selective:
            sel = np.array([float(a) for a in content[3:]])
        else:
            sel = None
            
        atoms.append([elem,pos,sel])

    return cell, atoms

def write_poscar(cell,atoms):

    poscar = "This poscar was generated by VaspGibbs\n1.0\n"

    for i in range(3):
        poscar += "%f %f %f\n"%(*list(cell[:,i]),)

    elements = {}
    for elem, _, _ in atoms:
        if elem in elements:
            elements[elem] += 1
        else:
            elements[elem] = 1

    poscar += " ".join(list(elements.keys())) + "\n"

    poscar += " ".join([str(a) for a in list(elements.values())]) + "\n"

    poscar += "Selective dynamics\nDirect\n"

    for _,pos,sel in atoms:
        poscar += " ".join([str(a) for a in pos]) + " "
        poscar += " ".join(sel) + "\n"

    with open("POSCAR", "w") as f:
        f.write(poscar)

def prepare_poscar(list_atoms, top):

    shutil.copyfile("POSCAR", "POSCAR.save")

    cell, atoms = read_poscar()

    z = []
    for i,a in enumerate(atoms):
        elem, pos, sel = a
        if (elem in list_atoms) or (str(i) in list_atoms):
            sel = np.array(["T","T","T"])
        else:
            sel = np.array(["F","F","F"])
        a[2] = sel
        z.append((pos[2]+tol)%1)

    if (list_atoms == []) and (top == 0):
        top = len(atoms)

    idx  = np.argsort(z)
    for i in range(top):
        atoms[idx[-(i+1)]][2] = np.array(["T","T","T"])
    
    write_poscar(cell,atoms)

def run_vasp(command, ncores, vasp):
    if ncores == 1:
        subprocess.run([vasp])
    else:
        subprocess.run([command, "-n", str(ncores), vasp])

def main():

    args = read_options()
    
    prepare_incar(args.ibrion)
    
    prepare_poscar(args.list_atoms, args.top)
    
    run_vasp(args.command, args.ncores, args.vasp)

main()
